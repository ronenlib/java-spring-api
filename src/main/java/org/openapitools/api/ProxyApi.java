/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PostProxy200Response;
import org.openapitools.model.PostProxy400Response;
import org.openapitools.model.PostProxyRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-26T19:35:46.310079470-04:00[America/New_York]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "proxy", description = "the proxy API")
public interface ProxyApi {

    default ProxyApiDelegate getDelegate() {
        return new ProxyApiDelegate() {};
    }

    /**
     * POST /proxy : Proxy requests to another service
     *
     * @param postProxyRequest  (required)
     * @return Proxy request successful (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "postProxy",
        summary = "Proxy requests to another service",
        responses = {
            @ApiResponse(responseCode = "200", description = "Proxy request successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostProxy200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostProxy400Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/proxy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostProxy200Response> postProxy(
        @Parameter(name = "PostProxyRequest", description = "", required = true) @Valid @RequestBody PostProxyRequest postProxyRequest
    ) {
        return getDelegate().postProxy(postProxyRequest);
    }

}

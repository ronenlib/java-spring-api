openapi: 3.0.3
info:
  description: A simple API demonstrating JWT authentication and best practices.
  title: Play API
  version: 1.0.0
servers:
- url: /
tags:
- description: Health check endpoints
  name: Health
- description: Authentication and login
  name: Auth
- description: User management
  name: Users
paths:
  /liveliness:
    get:
      description: Useful for load balancers or monitoring tools.
      operationId: getLiveliness
      responses:
        "200":
          content:
            application/json:
              example:
                status: alive
              schema:
                $ref: "#/components/schemas/LivelinessResponse"
          description: Service is alive
      summary: Check if the service is alive
      tags:
      - Health
      x-accepts:
      - application/json
      x-tags:
      - tag: Health
  /auth/login:
    post:
      description: Authenticate a user and return a JWT token.
      operationId: postLogin
      requestBody:
        content:
          application/json:
            example:
              username: admin
              password: admin
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              schema:
                $ref: "#/components/schemas/LoginSuccessResponse"
          description: Login successful
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid credentials
      summary: Login to the service
      tags:
      - Auth
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Auth
  /users/{id}:
    get:
      description: Requires a valid JWT token.
      operationId: getUserById
      parameters:
      - description: ID of the user to retrieve
        explode: false
        in: path
        name: id
        required: true
        schema:
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
          description: App user
        "401":
          content:
            application/json:
              example:
                message: Unauthorized
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unauthorized â€“ invalid or missing token
        "404":
          content:
            application/json:
              example:
                message: User not found
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: User not found
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - Users
      x-accepts:
      - application/json
      x-tags:
      - tag: Users
components:
  schemas:
    LivelinessResponse:
      example:
        status: alive
      properties:
        status:
          example: alive
          type: string
      required:
      - status
      type: object
    LoginRequest:
      example:
        password: admin
        username: admin
      properties:
        username:
          example: admin
          type: string
        password:
          example: admin
          format: password
          type: string
      required:
      - password
      - username
      type: object
    LoginSuccessResponse:
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      properties:
        token:
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
      type: object
    UserResponse:
      example:
        id: 1
        username: admin
      properties:
        id:
          example: 1
          type: integer
        username:
          example: admin
          type: string
      required:
      - id
      - username
      type: object
    ErrorResponse:
      example:
        code: ERROR
        message: Unauthorized
      properties:
        code:
          example: ERROR
          type: string
        message:
          example: Unauthorized
          type: string
      required:
      - message
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
